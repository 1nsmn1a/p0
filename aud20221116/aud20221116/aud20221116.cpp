#include <iostream>
#include <ctime>

using namespace std;
const int n = 4;
const int m = 8;
const int firs_value = -10;
const int last_value = 10;

int genRand() {
    // формула генерации случайных чисел по заданному диапазону
    // где firs_value - минимальное число из желаемого диапазона
    // last_value - ширина выборки
    return firs_value + rand() % last_value;
}

void genNumbers(int numbers[n][m], int n, int m) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            numbers[i][j] = genRand();
}

void displayNumbers(int numbers[n][m], int n, int m) {
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            cout << " " << numbers[i][j];
        cout << "\n";
    }
}

int main()
{
    srand(time(0)); // автоматическая рандомизация
    //Общее задание : осуществить ввод размерности двумерного массива, его элементов с
    //клавиатуры (можно предположить, что максимальная размерность входного массива
    //не более чем 10 на 10).
    // существлять вывод на экран входного массива, результата
    //работы, а также всех промежуточных решений
    // 
    //Вариант работы выбирается по 2 - м последним цифрам студенческого билета(всего
    //    вариантов 15 с 0 - го по 14 - й).
    // Например : последние цифры 12 – 12 вариант; последние
    //цифры 39 вариант – 39 - 15 * 2 = 39 - 30 = 9 вариант; последние цифры 82 вариант – 82 -
    //15 * 5 = 82 - 75 = 7 вариант
    //Номер варианта с текстом задания разместить в начале программы.
    // 
    //Файл именовать : Фамилия_И_О_номерварианта(пример : Семенов_П_С_11
    

    int numbers[n][m];
    genNumbers(numbers,n,m);
    displayNumbers(numbers, n, m);

    //Вариант 6
    //Дан двумерный массив, размером(n⋅на⋅m).
    //Найти максимальный элемент в каждой строке матрицы
    //среди отрицательных элементов.Затем все положительные элементы каждой строки заменить на
    //соответствующий найденный максимальный элемент.При отсутствии положительных элементов в
    //строке данную строку заменить строкой, содержащей минимальный из максимальных
    //отрицательных элементов
    int max_elements[n];
    for (int i = 0; i < n; i++)
        max_elements[i] = firs_value-1;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (numbers[i][j] > max_elements[i])
                max_elements[i] = numbers[i][j];
    cout << "\n   \n";
    for (int i = 0; i < n; i++)
        cout <<"  "<< max_elements[i];
    

    
}

